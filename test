i18next::backendConnector: loaded namespace app for language en { irc: 
   { initializing: 'Connecting to IRC',
     connected: 'Connected to {{- server}} as {{- nick}}' },
  listeners: { init: 'Initializing Listeners' },
  database: 
   { initializing: 'Initializing Database Sub System',
     initialized: 'Database Sub System initialized',
     missing: 'No Database system found, {{feature}} limited/disabled' },
  scripts: 
   { initializing: 'Initializing scripts from {{- dir}}',
     loaded: 'Loaded Script: {{- file}}',
     error: 'Error Loading Script in {{- path}}' },
  storage: 
   { initialized: 'Storage Initialized',
     ignored: 'Total Ignored: {{total}}',
     admins: 'Total Admins: {{total}}' },
  aliases: 
   { imporperStructure: 'Improper structure in config.js for commandBindings',
     doesNotExist: 'The Alias {{alias}} for the command {{command}} does not exists',
     alreadyExists: 'The Alias {{alias}} for the command {{command}} already exists' },
  bootstrap: 
   { rebooting: 'Rebooting...',
     reloading: 'Reloading...',
     reloadConfig: 'Reloading Configuration Object' },
  events: 
   { channelJoined: 'Joined channel {{- channel}}',
     channelParted: 'Parted channel {{- channel}}: {{- reason}}',
     kickLoggingBy: 'Kicked from {{channel}} by {{- by}}: {{- reason}}',
     kickLoggingFrom: 'Kicked {{- nick}} from {{- channel}}: {{- reason}}',
     quitLogging: 'Quit server and left {{- channels}} because {{- reason}}',
     topicLogging: 'Changed Topic of {{- channel}} to {{topic}}',
     registeredToIrc: 'Registered to IRC server',
     sentMessage: 'Message: {{- target}} {{- message}}',
     sentAction: 'Action: {{- target}} {{- message}}',
     sentNotice: 'Notice: {{- target}} {{- message}}',
     nickChanged: 'Changed Nickname from {{- oldnick}} to {{- newnick}}' },
  auth: 
   { notMemberOfGroup: 'You are not a member of the group {{group}}. Access Denied',
     notMemberOfGroupLogging: '{{- nick}} on {{- channel}} tried to use the {{group}} command {{type}}',
     notIdentified: 'You must be identified with NickServ to use this command' },
  webServer: 
   { starting: 'Starting Web Server...',
     started: 'Web Server started on {{port}}' },
  errors: { moreInformation: 'I need some more information {{- nick}}' } }
i18next::backendConnector: loaded namespace libraries for language en { whoisFailed: 'Unable to whois {{- nick}}',
  userDoesNotExist: 'User does not exist',
  invalidReplaceInput: 'Invalid input detected in Replace All Extension',
  scheduler: 
   { duplicate: 'Duplicate job {{name}} for time {{time}} not loaded',
     missingCallback: 'Command {{name}} is missing a Callback',
     systemTask: '{{name}} has been identified as a system task' } }
i18next: languageChanged en
i18next: initialized { debug: true,
  initImmediate: false,
  ns: [ 'app', 'libraries' ],
  defaultNS: 'app',
  fallbackLng: [ 'en' ],
  fallbackNS: false,
  whitelist: [ 'en', 'cimode' ],
  nonExplicitWhitelist: false,
  load: 'current',
  preload: [ 'en' ],
  keySeparator: '.',
  nsSeparator: ':',
  pluralSeparator: '_',
  contextSeparator: '_',
  saveMissing: true,
  saveMissingTo: 'current',
  missingKeyHandler: false,
  postProcess: false,
  returnNull: true,
  returnEmptyString: true,
  returnObjects: false,
  joinArrays: false,
  returnedObjectHandler: [Function: returnedObjectHandler],
  parseMissingKeyHandler: false,
  appendNamespaceToMissingKey: false,
  overloadTranslationOptionHandler: [Function: overloadTranslationOptionHandler],
  interpolation: 
   { escapeValue: true,
     format: [Function: format],
     prefix: '{{',
     suffix: '}}',
     formatSeparator: ',',
     unescapePrefix: '-',
     nestingPrefix: '$t(',
     nestingSuffix: ')',
     defaultVariables: undefined },
  lng: 'en',
  backend: 
   { loadPath: '/mnt/nas/code/projects/fsociety/MrNodeBot/localization/{{lng}}/{{ns}}.json',
     addPath: '/mnt/nas/code/projects/fsociety/MrNodeBot/localization/{{lng}}/{{ns}}.missing.json',
     jsonIndent: 2 } }
i18next: languageChanged en
i18next::backendConnector: loaded namespace app for language en { irc: 
   { initializing: 'Connecting to IRC',
     connected: 'Connected to {{- server}} as {{- nick}}' },
  listeners: { init: 'Initializing Listeners' },
  database: 
   { initializing: 'Initializing Database Sub System',
     initialized: 'Database Sub System initialized',
     missing: 'No Database system found, {{feature}} limited/disabled' },
  scripts: 
   { initializing: 'Initializing scripts from {{- dir}}',
     loaded: 'Loaded Script: {{- file}}',
     error: 'Error Loading Script in {{- path}}' },
  storage: 
   { initialized: 'Storage Initialized',
     ignored: 'Total Ignored: {{total}}',
     admins: 'Total Admins: {{total}}' },
  aliases: 
   { imporperStructure: 'Improper structure in config.js for commandBindings',
     doesNotExist: 'The Alias {{alias}} for the command {{command}} does not exists',
     alreadyExists: 'The Alias {{alias}} for the command {{command}} already exists' },
  bootstrap: 
   { rebooting: 'Rebooting...',
     reloading: 'Reloading...',
     reloadConfig: 'Reloading Configuration Object' },
  events: 
   { channelJoined: 'Joined channel {{- channel}}',
     channelParted: 'Parted channel {{- channel}}: {{- reason}}',
     kickLoggingBy: 'Kicked from {{channel}} by {{- by}}: {{- reason}}',
     kickLoggingFrom: 'Kicked {{- nick}} from {{- channel}}: {{- reason}}',
     quitLogging: 'Quit server and left {{- channels}} because {{- reason}}',
     topicLogging: 'Changed Topic of {{- channel}} to {{topic}}',
     registeredToIrc: 'Registered to IRC server',
     sentMessage: 'Message: {{- target}} {{- message}}',
     sentAction: 'Action: {{- target}} {{- message}}',
     sentNotice: 'Notice: {{- target}} {{- message}}',
     nickChanged: 'Changed Nickname from {{- oldnick}} to {{- newnick}}' },
  auth: 
   { notMemberOfGroup: 'You are not a member of the group {{group}}. Access Denied',
     notMemberOfGroupLogging: '{{- nick}} on {{- channel}} tried to use the {{group}} command {{type}}',
     notIdentified: 'You must be identified with NickServ to use this command' },
  webServer: 
   { starting: 'Starting Web Server...',
     started: 'Web Server started on {{port}}' },
  errors: { moreInformation: 'I need some more information {{- nick}}' } }
i18next::backendConnector: loaded namespace libraries for language en { whoisFailed: 'Unable to whois {{- nick}}',
  userDoesNotExist: 'User does not exist',
  invalidReplaceInput: 'Invalid input detected in Replace All Extension',
  scheduler: 
   { duplicate: 'Duplicate job {{name}} for time {{time}} not loaded',
     missingCallback: 'Command {{name}} is missing a Callback',
     systemTask: '{{name}} has been identified as a system task' } }
i18next: languageChanged en
i18next: initialized { debug: true,
  initImmediate: false,
  ns: [ 'app', 'libraries' ],
  defaultNS: 'app',
  fallbackLng: [ 'en' ],
  fallbackNS: false,
  whitelist: [ 'en', 'cimode' ],
  nonExplicitWhitelist: false,
  load: 'current',
  preload: [ 'en' ],
  keySeparator: '.',
  nsSeparator: ':',
  pluralSeparator: '_',
  contextSeparator: '_',
  saveMissing: true,
  saveMissingTo: 'current',
  missingKeyHandler: false,
  postProcess: false,
  returnNull: true,
  returnEmptyString: true,
  returnObjects: false,
  joinArrays: false,
  returnedObjectHandler: [Function: returnedObjectHandler],
  parseMissingKeyHandler: false,
  appendNamespaceToMissingKey: false,
  overloadTranslationOptionHandler: [Function: overloadTranslationOptionHandler],
  interpolation: 
   { escapeValue: true,
     format: [Function: format],
     prefix: '{{',
     suffix: '}}',
     formatSeparator: ',',
     unescapePrefix: '-',
     nestingPrefix: '$t(',
     nestingSuffix: ')',
     defaultVariables: undefined },
  lng: 'en',
  backend: 
   { loadPath: '/mnt/nas/code/projects/fsociety/MrNodeBot/localization/{{lng}}/{{ns}}.json',
     addPath: '/mnt/nas/code/projects/fsociety/MrNodeBot/localization/{{lng}}/{{ns}}.missing.json',
     jsonIndent: 2 } }
i18next: languageChanged en
